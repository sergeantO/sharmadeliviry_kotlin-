package ${PACKAGE}.infrastructure.controller

import java.util.UUID
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*

import ${PACKAGE}.application.${ENTITY_LOWERCASE}.command.Create${ENTITY}Command
import ${PACKAGE}.application.${ENTITY_LOWERCASE}.query.Get${ENTITY}ListQuery
import ${PACKAGE}.application.${ENTITY_LOWERCASE}.query.Get${ENTITY}Query
import ${PACKAGE}.domain.${ENTITY_LOWERCASE}.Create${ENTITY}Model
import ${PACKAGE}.domain.${ENTITY_LOWERCASE}.${ENTITY}Id
import ${PACKAGE}.domain.${ENTITY_LOWERCASE}.${ENTITY}Model
import ${PACKAGE}.infrastructure.shared.ResponseMapper

@RestController
@RequestMapping("/api/v1/${ENTITY_LOWERCASE}s")
class ${ENTITY}Controller(
    private val responseMapper: ResponseMapper,
    private val get${ENTITY}Query: Get${ENTITY}Query,
    private val get${ENTITY}ListQuery: Get${ENTITY}ListQuery,
    private val create${ENTITY}Command: Create${ENTITY}Command,
) {
    @GetMapping
    suspend fun list(): ResponseEntity<List<${ENTITY}Dto>> =
        get${ENTITY}ListQuery
            .execute()
            .let { result -> responseMapper.toResponseEntity(result) { ${ENTITY_LOWERCASE}s -> ${ENTITY_LOWERCASE}s.map { it.toDto() } } }

    @GetMapping("/{id}")
    suspend fun get(@PathVariable("id") id: UUID): ResponseEntity<${ENTITY}Dto> =
        get${ENTITY}Query
            .execute(${ENTITY}Id(id))
            .let { result -> responseMapper.toResponseEntity(result) { it -> it?.toDto() } }

    @PostMapping
    suspend fun create(@RequestBody ${ENTITY_LOWERCASE}Dto: Create${ENTITY}Dto): ResponseEntity<${ENTITY}Dto> =
        create${ENTITY}Command
            .execute(${ENTITY_LOWERCASE}Dto.toModel())
            .let { result -> responseMapper.toResponseEntity(result, HttpStatus.CREATED) { model -> model.toDto() } }
}

data class ${ENTITY}Dto(
    val id: String,
    val name: String,
)

private fun ${ENTITY}Model.toDto(): ${ENTITY}Dto =
    ${ENTITY}Dto(
        id = this.id.value.toString(),
        name = this.name,
    )

data class Create${ENTITY}Dto(
    val name: String,
)

private fun Create${ENTITY}Dto.toModel() =
    Create${ENTITY}Model(
        name = name,
    )
